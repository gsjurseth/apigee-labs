static_resources:
  listeners:
  - address:
      socket_address:
        address: 0.0.0.0
        port_value: 8080
    filter_chains:
    - filters:
      - name: envoy.filters.network.http_connection_manager
        typed_config:
          "@type": type.googleapis.com/envoy.config.filter.network.http_connection_manager.v2.HttpConnectionManager
          codec_type: auto
          stat_prefix: ingress_http
          access_log:
          - name: envoy.access_loggers.file
            typed_config:
              "@type": type.googleapis.com/envoy.config.accesslog.v2.FileAccessLog
              path: "/tmp/access.log"
          route_config:
            name: local_route
            virtual_hosts:
            - name: backend
              domains:
              - "*"
              routes:
              - match:
                  prefix: "/"
                  grpc: {}
                route:
                  cluster: backend_grpc_service
                per_filter_config:
                  envoy.filters.http.dynamic_forward_proxy: # rewrite :authority for Apigee product check
                    host_rewrite: httpbin.org

          http_filters:
          # - name: envoy.filters.http.router
          #   typed_config: {}
          # rewrite :authority for Apigee product check
            
        

          - name: envoy.filters.http.dynamic_forward_proxy
            config:
              dns_cache_config: 
                name: dynamic_forward_proxy_cache_config
                dns_lookup_family: "V4_ONLY"

          # evaluate Apigee rules
          - name: envoy.ext_authz
            config:
              grpc_service:
                envoy_grpc:
                  cluster_name: apigee-remote-service-envoy
                timeout: 1s                
              metadata_context_namespaces:
              - envoy.filters.http.jwt_authn

          # evaluate RBAC (necessary for Apigee config: reject_unauthorized == false)
          - name: envoy.filters.http.rbac
            config:
              rules:
                action: ALLOW
                policies:
                  apigee-connector:
                    principals:
                    - any: true
                    permissions:
                    - header: { "name": "X-Apigee-Authorized" }

          - name: envoy.filters.http.router
          access_log: 

          # collect Apigee analytics
          - name: envoy.http_grpc_access_log 
            config:
              common_config:
                grpc_service:
                  envoy_grpc:
                    cluster_name: apigee-remote-service-envoy
                log_name: apigee-remote-service-envoy
              additional_request_headers_to_log:
              - :authority # default target header
              # context headers
              - x-apigee-accesstoken
              - x-apigee-api
              - x-apigee-apiproducts
              - x-apigee-application
              - x-apigee-clientid
              - x-apigee-developeremail

  clusters:
  - name: backend_grpc_service
    connect_timeout: 0.250s
    type: strict_dns
    lb_policy: round_robin
    http2_protocol_options: {}
    load_assignment:
      cluster_name: backend_grpc_service
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: grpchost
                port_value: 50051


  # define cluster for Apigee remote service
  - name: apigee-remote-service-envoy
    type: STRICT_DNS
    http2_protocol_options: {}
    load_assignment:
      cluster_name: apigee-remote-service-envoy
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: apigeers
                port_value: 5000
    common_lb_config:
      healthy_panic_threshold:
        value: 50.0
    health_checks:
      - timeout: 1s
        interval: 5s
        interval_jitter: 1s
        no_traffic_interval: 5s
        unhealthy_threshold: 1
        healthy_threshold: 3
        grpc_health_check: {}
    connect_timeout: 0.25s


    # define cluster for Apigee JWKS certs
  - name: apigee-auth-service
    connect_timeout: 2s
    type: LOGICAL_DNS
    dns_lookup_family: V4_ONLY
    lb_policy: ROUND_ROBIN
    load_assignment:
      cluster_name: apigee-auth-service
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: org.apigee.net
                port_value: 443
    transport_socket:
      name: envoy.transport_sockets.tls
      typed_config:
        "@type": type.googleapis.com/envoy.api.v2.auth.UpstreamTlsContext
        sni: org.apigee.net


admin:
  access_log_path: "/tmp/admin_access.log"
  address:
    socket_address:
      address: 0.0.0.0
      port_value: 9000
